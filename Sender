package com.deegeu.messaging.producers;

import javax.jms.Queue;
import javax.jms.Session;
import javax.jms.TextMessage;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.jms.QueueSender;

import java.util.Date;
import java.util.Properties;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.DeliveryMode;
import javax.jms.Destination;
import javax.jms.JMSContext;
import javax.jms.MessageConsumer;
import javax.jms.MessageProducer;
import javax.jms.QueueSession;
import javax.jms.QueueConnection;
import javax.jms.QueueConnectionFactory;
                                                                            
public class Sender
{
	private static final String CONNECTION_FACTORY = "jms/RemoteConnectionFactory";
    private static final String QUEUE_DESTINATION = "jms/queue/test";
    private static final String INITIAL_CONTEXT_FACTORY = "org.jboss.naming.remote.client.InitialContextFactory";
    private static final String PROVIDER_URL = "remote://localhost:4447";
    
    public static void main(String[] args) throws Exception
    {
    	Context namingContext = null;
        JMSContext context = null;
        
        // Set up the namingContext for the JNDI lookup
        // Make sure you create an application user in Wildfly that matches the 
        // username and password below.  Usually a bad practice to have passwords
        // in code, but this is just a simple example.
        final Properties env = new Properties();
        env.put(Context.INITIAL_CONTEXT_FACTORY, INITIAL_CONTEXT_FACTORY);
        env.put(Context.PROVIDER_URL, System.getProperty(Context.PROVIDER_URL, PROVIDER_URL));
       // env.put(Context.SECURITY_PRINCIPAL, "guest");     // username
        //env.put(Context.SECURITY_CREDENTIALS, "guest");   // password
        
        try {
        	System.out.println(" Entered Sender Context ...........");
	        namingContext = new InitialContext(env);
	        
	        // Use JNDI to look up the connection factory and queue
	        ConnectionFactory connectionFactory = (ConnectionFactory) namingContext.lookup(CONNECTION_FACTORY);
	        Destination destination = (Destination) namingContext.lookup(QUEUE_DESTINATION);
	        
	        
	        System.out.println(" Entered Sender Context ...........1");
	        Connection connection = connectionFactory.createConnection();
	        Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
	        
	        System.out.println(" Entered Sender Context ...........2");
	        
	        MessageProducer producer = session.createProducer(destination);
	        
	        TextMessage message = session.createTextMessage("Hello, HornetQ!");
	        System.out.println(" Entered Sender Context ...........3");
	        producer.send(message);
	        System.out.println("Sent message: " + message.getText());
	        
	        //create consumer
	     //   MessageConsumer messageConsumer = session.createConsumer(destination);

	        // Step 8. Start the Connection so that the server starts to deliver messages
	        connection.start();

	        // Step 9. Receive the message
	      //  TextMessage messageReceived = (TextMessage)messageConsumer.receive(5000);
	       // System.out.println("Received message: " + messageReceived.getText());

	        // Finally, we clean up all the JMS resources
	        connection.close();
	        
	        
	        
	        // Create a JMS context to use to create producers
	  //      context = connectionFactory.createContext("guest", "guest"); // again, don't do this in production
	        
	   //     // Create a producer and send a message
	  //      context.createProducer().send(destination, "This is my hello JMS message at " + new Date());  
	        System.out.println("Message sent.............");
        } finally {
        	if (namingContext != null) {
        		namingContext.close();
        	}
        	if (context != null) {
        		context.close();
        	}
        }
                                                               
        }
}
